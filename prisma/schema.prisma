generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Candidate {
  id             Int       @id @default(autoincrement())
  name           String
  email          String    @unique
  password       String
  year           Int?      
  collegeName    String?
  location       String?
  resume         Json?
  dreamCompanies String[]  
  skills         String[]  
  createdAt      DateTime  @default(now())
  resumeAnalysis Json?

  // many-to-many applications
  appliedJobs    JobListing[] @relation("AppliedCandidates")
  shortlistedJobs JobListing[] @relation("ShortlistedCandidates")

  // interviews back‑relation
  interviews     Interview[]
}

model Recruiter {
  id          Int           @id @default(autoincrement())
  companyName String
  email       String        @unique
  password    String
  website     String?
  location    String?
  industry    String?
  values      String[]      
  description String?       @db.Text
  companySize String?      
  linkedInUrl String?
  createdAt   DateTime      @default(now())
  jobListings JobListing[]
}

model JobListing {
  id               Int           @id @default(autoincrement())
  title            String
  companyId        Int
  location         String?
  remote           Boolean       @default(false)
  salary           String?
  description      String        @db.Text
  employmentType   String
  experienceLevel  String?
  jobRole          String?
  skills           String[]
  education        String?
  postedDate       DateTime      @default(now())
  expiryDate       DateTime?
  status           String        @default("active")
  applicationCount Int           @default(0)

  // many-to-many candidates
  candidates       Candidate[]   @relation("AppliedCandidates")
  shortlisted      Candidate[]   @relation("ShortlistedCandidates")

  // interviews back‑relation
  interviews       Interview[]

  Recruiter        Recruiter?    @relation(fields: [companyId], references: [id])

  @@index([title])
  @@index([skills])
  @@index([companyId])
}

enum InterviewType {
  TECHNICAL
  HR
}

model Interview {
  id                  Int            @id @default(autoincrement())
  candidate           Candidate      @relation(fields: [candidateId], references: [id])
  candidateId         Int
  jobListing          JobListing     @relation(fields: [jobListingId], references: [id])
  jobListingId        Int

  type                InterviewType
  topics              String[]       // only used when type = TECHNICAL
  scheduledDateTime   DateTime
  attemptedDateTime   DateTime?      // null until they actually take it
  stats               Json?          // store any performance data here

  createdAt           DateTime       @default(now())
}

model CodingProblem {
  id          Int    @id @default(autoincrement())
  title       String
  difficulty  String // Easy, Medium, Hard
  description String @db.Text

  category String[] // e.g., "Arrays", "String", "Dynamic Programming"

  companiesAskedIn String[]

  approaches Json? // Array of approaches or methods to solve the problem

  @@index([title])
  @@index([difficulty])
  @@index([category])
  @@index([companiesAskedIn])
}